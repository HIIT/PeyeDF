--- /Users/marco/Downloads/pupil-master/pupil_src/shared_modules/surface_tracker.py	2017-02-10 01:37:04.000000000 +0200
+++ /Users/marco/git/PeyeDF/Extras/Pupil_plugins/surface_tracker_fixations.py	2017-02-16 14:03:48.000000000 +0200
@@ -29,11 +29,11 @@
 
 from math import sqrt
 
-class Surface_Tracker(Plugin):
+class Surface_Tracker_Fixations(Plugin):
     """docstring
     """
     def __init__(self,g_pool,mode="Show Markers and Surfaces",min_marker_perimeter = 100,invert_image=False,robust_detection=True):
-        super().__init__(g_pool)
+        super(Surface_Tracker_Fixations, self).__init__(g_pool)
         self.order = .2
 
         # all markers that are detected in the most recent frame
@@ -70,7 +70,9 @@
         self.surface_definitions = Persistent_Dict(os.path.join(self.g_pool.user_dir,'surface_definitions') )
         self.surfaces = [Reference_Surface(saved_definition=d) for d in  self.surface_definitions.get('realtime_square_marker_surfaces',[]) if isinstance(d,dict)]
 
-
+    def clone(self):
+        return Surface_Tracker_Fixations(**self.get_init_dict())
+    
     def on_click(self,pos,button,action):
         if self.mode == 'Show Markers and Surfaces':
             if action == GLFW_PRESS:
@@ -128,7 +130,7 @@
         self.update_gui_markers()
 
     def init_gui(self):
-        self.menu = ui.Growing_Menu('Surface Tracker')
+        self.menu = ui.Growing_Menu('Surface Tracker Fixations')
         self.g_pool.sidebar.append(self.menu)
 
         self.button = ui.Thumb('running',self,label='T',hotkey='t')
@@ -206,13 +208,15 @@
             s.locate(self.markers,self.camera_calibration,self.min_marker_perimeter,self.min_id_confidence, self.locate_3d)
             if s.detected:
                 s.gaze_on_srf = s.map_data_to_surface(events.get('gaze_positions',[]),s.m_from_screen)
+                s.fixations_on_srf = s.map_data_to_surface(events.get('fixations',[]),s.m_from_screen)
             else:
-                s.gaze_on_srf =[]
+                s.gaze_on_srf = []
+                s.fixations_on_srf = []
 
         events['surface'] = []
         for s in self.surfaces:
             if s.detected:
-                events['surface'].append({'name':s.name,'uid':s.uid,'m_to_screen':s.m_to_screen.tolist(),'m_from_screen':s.m_from_screen.tolist(),'gaze_on_srf': s.gaze_on_srf, 'timestamp':frame.timestamp,'camera_pose_3d':s.camera_pose_3d.tolist() if s.camera_pose_3d is not None else None})
+                events['surface'].append({'name':s.name,'uid':s.uid,'m_to_screen':s.m_to_screen.tolist(),'m_from_screen':s.m_from_screen.tolist(),'gaze_on_srf': s.gaze_on_srf, 'fixations_on_srf': s.fixations_on_srf, 'timestamp':frame.timestamp,'camera_pose_3d':s.camera_pose_3d.tolist() if s.camera_pose_3d is not None else None})
 
 
         if self.running:
